### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Discipline {
  id: Int!
  name: String!
  tag(after: TagWhereUniqueInput, before: TagWhereUniqueInput, first: Int, last: Int, orderBy: DisciplineTagOrderByInput, skip: Int): [Tag!]!
}

type DisciplineConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [DisciplineEdge]

  """Flattened list of Discipline type"""
  nodes: [Discipline]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type DisciplineEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Discipline
}

input DisciplineTagOrderByInput {
  type: OrderByArg
}

input DisciplineWhereUniqueInput {
  id: Int
}

type Event {
  date: String
  descr: String
  id: Int!
  notes: String
  owner: String
  startdate: Int
  status: String!
  tag(after: TagWhereUniqueInput, before: TagWhereUniqueInput, first: Int, last: Int, orderBy: EventTagOrderByInput, skip: Int): [Tag!]!
  timestamp: DateTime
  type: String!
}

type EventEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Event
}

input EventTagOrderByInput {
  type: OrderByArg
}

input EventWhereUniqueInput {
  id: Int
}

type Field {
  id: Int!
  name: String!
  thingid: Int!
  value: String
}

input FieldWhereUniqueInput {
  id: Int
}

type Morpher {
  User: User
  audio: String
  child(after: MorpherWhereUniqueInput, before: MorpherWhereUniqueInput, first: Int, last: Int, orderBy: MorpherChildOrderByInput, skip: Int): [Morpher!]!
  createdAt: DateTime
  id: Int!
  image: String
  media: String
  medium: String!
  name: String!
  order: DateTime
  parent: Morpher
  parentId: Int
  status: String!
  text: String
  type: String
  updatedAt: DateTime
}

input MorpherChildOrderByInput {
  order: OrderByArg
}

type MorpherEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Morpher
}

input MorpherOrderByInput {
  name: OrderByArg
  order: OrderByArg
  time: OrderByArg
}

input MorpherWhereUniqueInput {
  id: Int
}

type Mutation {
  completeOnboarding: Boolean
  createEvent(date: String, descr: String!, id: Int, notes: String, status: String!, tags: String, type: String!): Event
  createMorpher(audio: String, image: String, media: String, medium: String!, name: String!, parentId: Int, status: String!, text: String, type: String): Morpher
  createStation(image: String, lati: Float!, long: Float!, media: String, name: String!, parentId: Int, status: String!, text: String!, time: Int!, video: String, website: String, wiki: String, wikipedia: String, zoom: Int!): Station
  createThing(fields: String!, id: Int, name: String!, status: String!, tags: String!, type: String!): Thing
  createTravelpoint(coordinates: String, date: String, descriptionwh: String, descriptionwikipedia: String, name: String!, note: String, officialsiteurl: String, region: String, sitecountry: String, sitetype: String, status: String!, type: String!, videourl: String, wikidataid: String, wikipediaurl: String, wikivoyageurl: String): Travelpoint
  deleteAccount(id: Int!): User
  deleteEvent(id: Int!): Event
  deleteMorpher(id: Int!): Morpher
  deleteStation(id: Int!): Station
  deleteThing(id: Int!): Thing
  deleteTravelpoint(id: Int!): Travelpoint
  login(email: String!, password: String!): User
  logout: Boolean
  requestPasswordReset(email: String!): Boolean
  resetPassword(confirmPassword: String, password: String, resetToken: String): User
  signup(confirmPassword: String, email: String, name: String, password: String, role: Int, status: Int): User
  updateEvent(date: String, descr: String, id: Int!, notes: String, owner: String, status: String, type: String): Event
  updateMorpher(audio: String, id: Int!, image: String, lockby: Int, media: String, medium: String, name: String, order: Float, parentId: Int, status: String, text: String, type: String): Morpher
  updateStation(id: Int!, image: String, lati: Float, lockby: Int, long: Float, media: String, name: String, order: Float, parentId: Int, status: String, text: String, time: Int, video: String, website: String, wiki: String, wikipedia: String, zoom: Int): Station
  updateThing(fields: String, id: Int!, name: String, owner: String, status: String, type: String): Thing
  updateTravelpoint(coordinates: String, date: String, descriptionwh: String, descriptionwikipedia: String, id: Int!, lockby: Int, name: String, note: String, officialsiteurl: String, order: Float, region: String, sitecountry: String, sitetype: String, status: String, type: String, videourl: String, wikidataid: String, wikipediaurl: String, wikivoyageurl: String): Travelpoint
  updateUser(email: String, id: Int!, image: String, name: String, password: String, role: Int, status: Int): User
}

type Nation {
  abbrev: String!
  id: Int!
  name: String!
}

type NationConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [NationEdge]

  """Flattened list of Nation type"""
  nodes: [Nation]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type NationEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Nation
}

input NationWhereUniqueInput {
  id: Int
}

enum OrderByArg {
  asc
  desc
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

type Query {
  disciplines(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the first n elements from the list."""
    first: Int!
    orderBy: QueryUsersOrderByInput
    skip: Int
  ): DisciplineConnection
  events(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the first n elements from the list."""
    first: Int!
    nameQuery: String
    orderBy: QueryEventsOrderByInput
    skip: Int
    statusQuery: String
    typeQuery: String
    where: EventWhereUniqueInput
  ): QueryEvents_Connection
  me: User
  morphers(
    """Returns the elements in the list that come after the specified cursor"""
    after: String
    discountRange: String

    """Returns the first n elements from the list."""
    first: Int!
    nameQuery: String
    orderBy: MorpherOrderByInput
    parentIdQuery: Int
    skip: Int
    statusQuery: String
    typeQuery: String
    where: MorpherWhereUniqueInput
  ): QueryMorphers_Connection
  nations(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the first n elements from the list."""
    first: Int!
    orderBy: QueryUsersOrderByInput
    skip: Int
  ): NationConnection
  stations(
    """Returns the elements in the list that come after the specified cursor"""
    after: String
    discountRange: String

    """Returns the first n elements from the list."""
    first: Int!
    nameQuery: String
    orderBy: StationOrderByInput
    parentIdQuery: Int
    skip: Int
    statusQuery: String
    typeQuery: String
    where: StationWhereUniqueInput
  ): QueryStations_Connection
  things(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the first n elements from the list."""
    first: Int!
    mtypeQuery: String
    nameQuery: String
    orderBy: QueryThingsOrderByInput
    skip: Int
    statusQuery: String
    typeQuery: String
    where: ThingWhereUniqueInput
  ): QueryThings_Connection
  travelpoints(
    """Returns the elements in the list that come after the specified cursor"""
    after: String
    discountRange: String

    """Returns the first n elements from the list."""
    first: Int!
    nameQuery: String
    orderBy: QueryTravelpointsOrderByInput
    skip: Int
    statusQuery: String
    typeQuery: String
    where: TravelpointWhereUniqueInput
  ): QueryTravelpoints_Connection
  users(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the first n elements from the list."""
    first: Int!
    nameQuery: String
    orderBy: QueryUsersOrderByInput
    skip: Int
    where: UserWhereUniqueInput
  ): QueryUsers_Connection
}

input QueryDisciplinesOrderByInput {
  name: OrderByArg
}

input QueryEventsOrderByInput {
  descr: OrderByArg
  timestamp: OrderByArg
}

type QueryEvents_Connection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [EventEdge]

  """Flattened list of Event type"""
  nodes: [Event]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int
}

input QueryMorphersOrderByInput {
  name: OrderByArg
  updatedAt: OrderByArg
}

type QueryMorphers_Connection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [MorpherEdge]

  """Flattened list of Morpher type"""
  nodes: [Morpher]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int
}

input QueryNationsOrderByInput {
  name: OrderByArg
}

input QueryStationsOrderByInput {
  name: OrderByArg
  updatedAt: OrderByArg
}

type QueryStations_Connection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [StationEdge]

  """Flattened list of Station type"""
  nodes: [Station]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int
}

input QueryThingsOrderByInput {
  name: OrderByArg
  timestamp: OrderByArg
}

type QueryThings_Connection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [ThingEdge]

  """Flattened list of Thing type"""
  nodes: [Thing]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int
}

input QueryTravelpointsOrderByInput {
  name: OrderByArg
  updatedAt: OrderByArg
}

type QueryTravelpoints_Connection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [TravelpointEdge]

  """Flattened list of Travelpoint type"""
  nodes: [Travelpoint]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int
}

input QueryUsersOrderByInput {
  name: OrderByArg
  status: OrderByArg
}

type QueryUsers_Connection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [UserEdge]

  """Flattened list of User type"""
  nodes: [User]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
  totalCount: Int
}

type Station {
  User: User
  child(after: StationWhereUniqueInput, before: StationWhereUniqueInput, first: Int, last: Int, orderBy: StationChildOrderByInput, skip: Int): [Station!]!
  createdAt: DateTime
  id: Int!
  image: String
  lati: Float!
  long: Float!
  media: String
  name: String!
  order: DateTime
  parent: Station
  parentId: Int
  status: String!
  text: String!
  time: Int!
  updatedAt: DateTime
  video: String
  website: String
  wiki: String
  wikipedia: String
  zoom: Int!
}

input StationChildOrderByInput {
  order: OrderByArg
}

type StationEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Station
}

input StationOrderByInput {
  name: OrderByArg
  order: OrderByArg
  time: OrderByArg
}

input StationWhereUniqueInput {
  id: Int
}

type Tag {
  descr: String
  discipline: Discipline
  event: Event
  flavour: String
  id: Int!
  tagthing: Thing
  thing: Thing
  type: String!
}

input TagWhereUniqueInput {
  id: Int
}

type Thing {
  Owner: User
  field(after: FieldWhereUniqueInput, before: FieldWhereUniqueInput, first: Int, last: Int, orderBy: ThingFieldOrderByInput, skip: Int): [Field!]!
  id: Int!
  name: String
  searchtext: String
  status: String
  tag(after: TagWhereUniqueInput, before: TagWhereUniqueInput, first: Int, last: Int, orderBy: ThingTagOrderByInput, skip: Int): [Tag!]!
  timestamp: DateTime
  type: String!
}

type ThingEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Thing
}

input ThingFieldOrderByInput {
  name: OrderByArg
}

input ThingTagOrderByInput {
  type: OrderByArg
}

input ThingWhereUniqueInput {
  id: Int
}

type Travelpoint {
  User: User
  coordinates: String
  createdAt: DateTime
  date: String
  descriptionwh: String
  descriptionwikipedia: String
  id: Int!
  name: String!
  note: String
  officialsiteurl: String
  order: DateTime
  region: String
  sitecountry: String
  sitetype: String
  status: String!
  type: String!
  updatedAt: DateTime
  videourl: String
  wikidataid: String
  wikipediaurl: String
  wikivoyageurl: String
}

type TravelpointEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Travelpoint
}

input TravelpointWhereUniqueInput {
  id: Int
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  Station(after: StationWhereUniqueInput, before: StationWhereUniqueInput, first: Int, last: Int, orderBy: UserStationOrderByInput, skip: Int): [Station!]!
  email: String!
  hasCompletedOnboarding: Boolean!
  hasVerifiedEmail: Boolean
  id: Int!
  image: String
  name: String!
  password: String
  role: Int
  status: Int
  token: String
}

type UserEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: User
}

input UserStationOrderByInput {
  createdAt: OrderByArg
}

input UserWhereUniqueInput {
  email: String
  googleId: String
  id: Int
  name: String
}